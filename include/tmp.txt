template<typename T>
void
write_max(std::vector<erate_t>& data,
          Critter& max_critter,
          std::string out_file,
          double max_fitness,
          int mutation_gap,
          int mutation_counter_low,
          int mutation_counter_high,
          int i,
          T& rng)
{
  std::ofstream ofs;
  ofs.open(out_file, std::ios::trunc);
  std::string header =
    fmt::format("\niteration: {0}, discount-total: {1:.2f}\n"
                "max-delta: {2:.2f}, prev-max-delta: {3:.2f}\n"
                "iteration-delta: {4}, rng-state: {5}",
                i,
                critter.fitness(),
                critter.fitness() - MAX_2019,
                critter.fitness() - max_fitness,
                i - mutation_gap,
                rng.state());

  max_fitness = critter.fitness();
  mutation_counter_low = i;
  mutation_counter_high = 0;
  mutation_gap = i;

  fmt::print("{0}\n", header);
  ofs << "lea-number,discount,cost,no-mutate,bucket\n";

  fmt::memory_buffer row;
  for (int k = 0; k < N; k++) {
    fmt::format_to(row,
                   "{0},{1},{2},{3},{4}\n",
                   data[k].lea_number,
                   data[k].discount,
                   data[k].cost,
                   std::get<0>(critter.genes()[k]),
                   std::get<1>(critter.genes()[k]));
    std::get<0>(critter.genes()[k]) = 1;
  }
  ofs << row.data();
  ofs.close();
}



int mutation_counter_low = 0;
  int mutation_counter_high = 0;
  int mutation_gap = 0;
  int t_mutation_count = mutation_count;


if ((i - mutation_counter_low) >= mutation_threshold_low) {
      mutation_counter_low = i;
      mutation_counter_high += 1;
      t_mutation_count = static_cast<float>(N * 3) / 100;
      fmt::print("\n***Low threshold met! Mutating by 3%... {0}/{1}***\n",
                 mutation_counter_high,
                 mutation_threshold_high);
      fmt::print("iteration: {0}, iteration-delta: {1}\n", i, i - mutation_gap);
      for (auto& critter : critters) {
        fmt::print("critter fitness: {0:.2f}, max-ratio: {1}\n",
                   critter.fitness(),
                   critter.fitness() / max_fitness);
      };
    } else if (mutation_counter_high >= mutation_threshold_high) {
      mutation_counter_high = 0;
      t_mutation_count = static_cast<float>(N * 9) / 100;
      fmt::print("\n***High threshold met! Mutating by 9%...***\n");
    }